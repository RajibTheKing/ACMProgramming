#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;

int MaxKeyNumber, doorNumber;
int DoorR[13], DoorG[13], RoomR[13], RoomG[13], RoomW[13];


class KeyDungeonDiv1
{
public:
	int maxKeys(vector <int> doorR, vector <int> doorG, vector <int> roomR, vector <int> roomG, vector <int> roomW, vector <int> keys)
	{
	    MaxKeyNumber = 0;
	    doorNumber = doorR.size();

	    for(int i=0;i<3;i++) MaxKeyNumber+=keys[i];

	    for(int i=0;i<doorNumber;i++)
        {
            DoorR[i] = doorR[i];
            DoorG[i] = doorG[i];
            RoomR[i] = roomR[i];
            RoomG[i] = roomG[i];
            RoomW[i] = roomW[i];
        }
        memset(dp, 0, sizeof(dp));
        int msk = 1<<doorNumber;
        msk--;
        Rec(msk, keys[0], keys[1], keys[2]);
        return MaxKeyNumber;


	}
	bool dp[1<<12][11][11][11];

	void Rec(int msk, int red, int green, int white)
	{
	    if(MaxKeyNumber< (red+green+white))
            MaxKeyNumber = red+green+white;

        bool &ret = dp[msk][red][green][white];

        if(ret) return;
        ret = true;
        if(msk==0) return;

        for(int i=0;i<doorNumber;i++)
        {
            if((msk&(1<<i))!=0)
            {
                if(isPossible(DoorR[i], DoorG[i], red,green,white))
                {
                    int tempRed, tempGreen, tempWhite;
                    tempRed = red-DoorR[i];
                    tempGreen = green-DoorG[i];
                    tempWhite = white;

                    for(tempWhite; tempWhite>0; tempWhite--)
                    {
                        if(tempRed>=0) break;
                        tempRed++;
                    }

                    for(tempWhite; tempWhite>0; tempWhite--)
                    {
                        if(tempGreen>=0) break;
                        tempGreen++;
                    }
                    tempRed+=RoomR[i];
                    tempGreen+=RoomG[i];
                    tempWhite+=RoomW[i];

                    Rec(msk^(1<<i), tempRed, tempGreen, tempWhite);

                }


            }
        }
    }

    bool isPossible(int R, int G, int red, int green, int white)
    {
        if( (R+G) > (red + green + white) ) return false;

        red-=R;
        green-=G;
        for(white;white>0;white--)
        {
            if(red>=0) break;
            red++;
        }

        for(white;white>0;white--)
        {
            if(green>=0) break;
            green++;
        }

        if(red<0 || green<0) return false;

        return true;
    }

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, vector <int> p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p5.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p5[i];
	}
	cout << "}";
	cout << "]" << endl;
	KeyDungeonDiv1 *obj;
	int answer;
	obj = new KeyDungeonDiv1();
	clock_t startTime = clock();
	answer = obj->maxKeys(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	vector <int> p5;
	int p6;

	{
	// ----- test 0 -----
	/*
	int t0[] = {8,4,3,6,1,8,0,3,6,2,1,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,7,5,9,0,3,9,1,9,3,0,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,1,2,1,0,2,2,3,3,0,2,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,2,1,0,3,2,2,2,3,0,2,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2,0,1,3,1,3,3,2,0,1,0,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {1,3,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
    */

	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,4,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,10};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,8,9};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,0,8};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {3,1,2};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));


	p6 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,2,3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,1,0,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,3,3,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,0,2,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,4,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {2,0,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,0,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,9};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0,9};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {8,5,9};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,0,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 27;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {5,3,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,9,2,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,9,2,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0,9,1,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {1,1,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 32;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {9,5,10,8,4,3,0,8,4,1,3,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9,10,0,8,9,4,3,8,1,8,10,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,0,2,3,3,5,3,1,3,0,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {5,2,5,0,5,2,3,4,0,0,5,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,5,1,2,0,4,4,0,3,3,1,3};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {5,0,1};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 16;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are exploring a dungeon.
// In the dungeon you found some locked doors.
// Each locked door has some red and some green keyholes (zero or more of each kind).
// In order to open a door, you must insert fitting keys into all its keyholes simultaneously.
// All the keys used to open a door break in the process of opening it and you have to throw them away.
// However, each door hides a small chamber that contains some new keys for you.
// Once you open the door, you may take all of those keys and possibly use them to open new doors.
// (Of course, it only makes sense to open each door at most once. If you open the same door again, there will be no new keys for you.)
//
// There are three kinds of keys: red, green, and white ones.
// Each red key fits into any red keyhole.
// Each green key fits into any green keyhole.
// Each white key fits into any keyhole (both red and green ones).
//
// You are given vector <int>s doorR, doorG, roomR, roomG, and roomW.
// These five vector <int>s all have the same length.
// For each valid i, the values at index i describe one of the doors you found:
// the door has doorR[i] red and doorG[i] green keyholes, and upon opening it you gain new keys: roomR[i] red ones, roomG[i] green ones, and roomW[i] white ones.
//
// You are also given the vector <int> keys with three elements:
// keys[0] is the number of red keys, keys[1] the number of green keys, and keys[2] the number of white keys you have at the beginning.
//
// Your goal is to have as many keys as possible at the moment when you decide to stop opening doors.
// (The colors of the keys do not matter.)
// You are allowed to open the doors in any order you like, and to choose the keys used to open each of the doors.
// You are also allowed to stop opening doors whenever you are satisfied with your current number of keys.
// Compute and return the maximal total number of keys you can have at the end.
//
// DEFINITION
// Class:KeyDungeonDiv1
// Method:maxKeys
// Parameters:vector <int>, vector <int>, vector <int>, vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int maxKeys(vector <int> doorR, vector <int> doorG, vector <int> roomR, vector <int> roomG, vector <int> roomW, vector <int> keys)
//
//
// CONSTRAINTS
// -doorR, doorG, roomR, roomG and roomW will each contain between 1 and 12 elements, inclusive.
// -doorR, doorG, roomR, roomG and roomW will contain the same number of elements.
// -Each element of doorR, doorG, roomR, roomG and roomW will be between 0 and 10, inclusive.
// -keys will contain exactly 3 elements.
// -Each element of keys will be between 0 and 10, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1, 2, 3}
// {0, 4, 9}
// {0, 0, 10}
// {0, 8, 9}
// {1, 0, 8}
// {3, 1, 2}
//
// Returns: 8
//
// First you have 3 red keys, 1 green key, 2 white keys. You can end with 8 keys as follows:
//
//
// First, you open door 0 using 1 red key. From the opened chamber you gain 1 white key, so currently you have 2 red keys, 1 green key, and 3 white keys.
//
//
// Second, you open door 1 using 2 red keys, 1 green key, and 3 white keys (all of them into green locks). Immediately after opening the door you have no keys: all the ones you had were just used and thus they broke. However, the chamber you just opened contains 8 green keys.
//
//
// You can't end with more than 8 keys, so you should return 8.
//
// 1)
// {1, 1, 1, 2}
// {0, 2, 3, 1}
// {2, 1, 0, 4}
// {1, 3, 3, 1}
// {1, 0, 2, 1}
// {0, 4, 0}
//
// Returns: 4
//
// You have only green keys, while each door has at least 1 red keyhole. So you cannot open any of the doors.
//
// 2)
// {2, 0, 4}
// {3, 0, 4}
// {0, 0, 9}
// {0, 0, 9}
// {8, 5, 9}
// {0, 0, 0}
//
// Returns: 27
//
// Initially you have no key at all, but door 1 also has no key hole. Therefore, you can start by opening door 1.
//
// 3)
// {5, 3, 0, 0}
// {0, 1, 2, 1}
// {0, 9, 2, 4}
// {2, 9, 2, 0}
// {0, 9, 1, 1}
// {1, 1, 0}
//
// Returns: 32
//
//
//
// 4)
// {9,5,10,8,4,3,0,8,4,1,3,9}
// {9,10,0,8,9,4,3,8,1,8,10,4}
// {1,2,0,2,3,3,5,3,1,3,0,5}
// {5,2,5,0,5,2,3,4,0,0,5,2}
// {1,5,1,2,0,4,4,0,3,3,1,3}
// {5,0,1}
//
// Returns: 16
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
