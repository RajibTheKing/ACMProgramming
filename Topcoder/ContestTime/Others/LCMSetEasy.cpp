#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class LCMSetEasy
{
public:
	string include(vector <int> S, int x)
	{
	    vector<int> fuck;
	    fuck.clear();
	    for(int i=0;i<S.size();i++)
        {
            if(S[i]==x) return "Possible";
            if(x%S[i]==0) fuck.push_back(x/S[i]);

        }

        if(fuck.size()==0) return "Impossible";
        int gd;

        cout<<"Found values: "<<endl;
        for(int i=0;i<fuck.size();i++)
        {
            cout<<fuck[i]<<" ";
            if(i==0) gd = fuck[i];
            else gd = __gcd(gd, fuck[i]);
        }
        cout<<endl;

        cout<<gd<<", "<<fuck.size()<<endl;
        if(fuck.size()>1)
        {
            if(gd==1) return "Possible";
            else return "Impossible";
        }
        return " ";

	}

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	LCMSetEasy *obj;
	string answer;
	obj = new LCMSetEasy();
	clock_t startTime = clock();
	answer = obj->include(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	string p2;

	{
	// ----- test 0 -----
	int t0[] = {2,3,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 611;
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 24;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {100,200,300,400,500,600};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2000;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {100,200,300,400,500,600};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8000;
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	int t0[] = {1000000000,999999999,999999998};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 999999999;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// For any non-empty sequence of positive integers s1, s2, ..., sK their least common multiple is the smallest positive integer that is divisible by each of the given numbers.
// We will use "lcm" to denote the least common multiple.
// For example, lcm(3) = 3, lcm(4,6) = 12, and lcm(2,5,7) = 70.
//
//
// You are given a vector <int> S and an int x.
// Find out whether we can select some elements from S in such a way that their least common multiple will be precisely x.
// Formally, we are looking for some s1, s2, ..., sK, K >= 1, such that each si belongs to S, and x=lcm(s1, s2, ..., sK).
// Return "Possible" if such elements of S exist, and "Impossible" if they don't.
//
// DEFINITION
// Class:LCMSetEasy
// Method:include
// Parameters:vector <int>, int
// Returns:string
// Method signature:string include(vector <int> S, int x)
//
//
// CONSTRAINTS
// -S will contain between 1 and 50 elements, inclusive.
// -Each element in S will be between 1 and 1,000,000,000, inclusive.
// -Elements in S will be distinct.
// -x will be between 2 and 1,000,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {2,3,4,5}
// 20
//
// Returns: "Possible"
//
// We can obtain 20 in multiple ways. One of them: 20 = lcm(4, 5).
//
// 1)
// {2,3,4}
// 611
//
// Returns: "Impossible"
//
// If S={2,3,4}, the only values we can obtain are 2, 3, 4, 6, and 12.
//
// 2)
// {2,3,4}
// 12
//
// Returns: "Possible"
//
//
//
// 3)
// {1,2,3,4,5,6,7,8,9,10}
// 24
//
// Returns: "Possible"
//
//
//
// 4)
// {100,200,300,400,500,600}
// 2000
//
// Returns: "Possible"
//
//
//
// 5)
// {100,200,300,400,500,600}
// 8000
//
// Returns: "Impossible"
//
//
//
// 6)
// {1000000000,999999999,999999998}
// 999999999
//
// Returns: "Possible"
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
