#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheArithmeticProgression {
public:
	double minimumChange(int a, int b, int c)
	{
	    double p, q;
	    p=b-a;
	    q=c-b;
        if(p==q) return 0.0;
        return (max(p, q) - min(p, q))/2.0;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	TheArithmeticProgression *obj;
	double answer;
	obj = new TheArithmeticProgression();
	clock_t startTime = clock();
	answer = obj->minimumChange(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	double p3;

	{
	// ----- test 0 -----
	p0 = 0;
	p1 = 1;
	p2 = 2;
	p3 = 0.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 0;
	p1 = 2;
	p2 = 1;
	p3 = 1.5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 2;
	p2 = 1;
	p3 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 4;
	p2 = 8;
	p3 = 2.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A triple (x, y, z) is called an arithmetic progression if the equality y - x = z - y holds.
//
// You are given three ints a, b and c. Your goal is to change the triple (a, b, c) into an arithmetic progression.
// You are only allowed to change one of the three numbers.
// The change must proceed as follows:
// First, you choose a non-negative real (not necessarily integer) number r.
// Then, you either add r to one of the three given numbers, or you subtract r from one of them. Return the minimum value of r which allows you to create an arithmetic progression.
//
// DEFINITION
// Class:TheArithmeticProgression
// Method:minimumChange
// Parameters:int, int, int
// Returns:double
// Method signature:double minimumChange(int a, int b, int c)
//
//
// CONSTRAINTS
// -a will be between 0 and 1000, inclusive.
// -b will be between 0 and 1000, inclusive.
// -c will be between 0 and 1000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 0
// 1
// 2
//
// Returns: 0.0
//
// The triple (0, 1, 2) is an arithmetic progression. Thus, you can choose r = 0.0 and add or subtract it from any of the given numbers without changing the triple.
//
// 1)
// 0
// 2
// 1
//
// Returns: 1.5
//
// Note that while (0, 1, 2) is an arithmetic progression, you cannot rearrange the numbers within the triple. You can choose r = 1.5 and subtract it from b, obtaining the triple (0, 0.5, 1).
//
// 2)
// 3
// 2
// 1
//
// Returns: 0.0
//
//
//
// 3)
// 4
// 4
// 8
//
// Returns: 2.0
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
