#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class AmoebaDivTwo {
public:
	int count(vector <string> table, int K)
	{

	    int kount=0;
	    for(int i=0;i<table.size();i++)
	    {
	        for(int j=0; j+K-1<table[i].size();j++)
	        {
	            int p = 1;

	            for(int k=0;k<K;k++)
	            {
	                p = p&(table[i][j+k]=='A');
	            }
	            kount+=p;
	        }
	    }
	    //cout<<"Here"<<endl;
	    if(K>1){
            for(int i=0; (i+K-1)<table.size();i++)
            {
                //cout<<"i = "<<i<<": ";
                for(int j=0;j<table[i].size();j++)
                {
                    //cout<<"j = "<<j<<" ";
                    int p = 1;

                    for(int k=0;k<K;k++)
                    {
                        p = p&(table[i+k][j]=='A');
                    }
                    kount+=p;
                }
                //cout<<endl;
            }
	    }
	    return kount;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	AmoebaDivTwo *obj;
	int answer;
	obj = new AmoebaDivTwo();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	string t0[] = {"MA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"AAA","AMA","AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"AA","AA","AA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 7;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"MMM","MMM","MMM"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"AAM","MAM","AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 6;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"AAA","AAM","AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 9;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Little Romeo likes cosmic amoebas a lot.  Recently he received one as a gift from his mother.  He decided to place his amoeba on a rectangular table.  The table is a grid of square 1x1 cells, and each cell is occupied by either matter or antimatter.  The amoeba is a rectangle of size 1xK.  Romeo can place it on the table in any orientation as long as every cell of the table is either completely covered by part of the amoeba or completely uncovered, and no part of the amoeba lies outside of the table.  It is a well-known fact that cosmic amoebas cannot lie on top of matter, so every cell of the table covered by the amoeba must only contain antimatter.
//
// You are given a vector <string> table, where the j-th character of the i-th element is 'A' if the cell in row i, column j of the table contains antimatter or 'M' if it contains matter.  Return the number of different ways that Romeo can place the cosmic amoeba on the table.  Two ways are considered different if and only if there is a table cell that is covered in one but not the other.
//
// DEFINITION
// Class:AmoebaDivTwo
// Method:count
// Parameters:vector <string>, int
// Returns:int
// Method signature:int count(vector <string> table, int K)
//
//
// CONSTRAINTS
// -table will contain between 1 and 50 elements, inclusive.
// -Each element of table will contain between 1 and 50 characters, inclusive.
// -All elements of table will have the same length.
// -Each character of each element of table will be either 'A' or 'M'.
// -K will be between 1 and 50, inclusive.
//
//
// EXAMPLES
//
// 0)
// {"MA"}
// 2
//
// Returns: 0
//
// The amoeba requires a 1x2 or 2x1 rectangle containing only antimatter, but there is no such space available on the table.
//
// 1)
// {"AAA",
//  "AMA",
//  "AAA"}
// 3
//
// Returns: 4
//
//
//
// 2)
// {"AA",
//  "AA",
//  "AA"}
// 2
//
// Returns: 7
//
// Here are all 7 configurations, where X represents the amoeba:
//
// XX .. .. X. .X .. ..
// .. XX .. X. .X X. .X
// .. .. XX .. .. X. .X
//
//
// 3)
// {"MMM",
//  "MMM",
//  "MMM"}
// 1
//
// Returns: 0
//
// There are no cells with antimatter at all.
//
// 4)
// {"AAM",
//  "MAM",
//  "AAA"}
// 1
//
// Returns: 6
//
//
//
// 5)
// {"AAA",
//  "AAM",
//  "AAA"}
// 2
//
// Returns: 9
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
