#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class JumpFurther
{
public:
	int furthest(int N, int badStep)
	{
	    bool flag=false;
	    int t=0;
	    for(int i=1;i<=N;i++)
        {
            t+=i;
            if(t==badStep) flag=true;
        }
        if(flag) return (N*(N+1)/2 - 1);
        else return (N*(N+1)/2);
	}


};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	JumpFurther *obj;
	int answer;
	obj = new JumpFurther();
	clock_t startTime = clock();
	answer = obj->furthest(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 3;
	p2 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 1313;
	p1 = 5858;
	p2 = 862641;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 1;
	p1 = 757065;
	p2 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Little Fox Jiro is standing at the bottom of a long flight of stairs.
// The bottom of the stairs has number 0, the bottommost step has number 1, the next step has number 2, and so on.
// The staircase is so long that Jiro is guaranteed not to reach its top.
//
//
// Jiro will now perform N consecutive actions.
// The actions are numbered 1 through N, in order.
// When performing action X, Jiro chooses between two options: either he does nothing, or he jumps exactly X steps up the stairs.
// In other words, if Jiro starts performing action X standing on step Y, he will end it either on step Y, or on step Y+X.
//
//
// For example, if N=3, Jiro will make three consecutive choices: whether or not to jump 1 step upwards, 2 steps upwards, and then 3 steps upwards.
//
//
// One of the steps is broken.
// The number of this step is badStep.
// Jiro cannot jump onto this step.
//
//
// You are given the ints N and badStep.
// Compute and return the number of the topmost step that can be reached by Jiro.
//
//
//
//
// DEFINITION
// Class:JumpFurther
// Method:furthest
// Parameters:int, int
// Returns:int
// Method signature:int furthest(int N, int badStep)
//
//
// CONSTRAINTS
// -N will be between 1 and 2,000, inclusive.
// -badStep will be between 1 and 4,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 2
// 2
//
// Returns: 3
//
// The optimal strategy is to jump upwards twice: from step 0 to step 1, and then from step 1 to step 3. This trajectory avoids the broken step.
//
// 1)
// 2
// 1
//
// Returns: 2
//
// In this case step 1 is broken, so Jiro cannot jump upwards as his first action. The optimal strategy is to first stay on step 0, and then to jump from step 0 to step 2.
//
// 2)
// 3
// 3
//
// Returns: 5
//
//
//
// 3)
// 1313
// 5858
//
// Returns: 862641
//
//
//
// 4)
// 1
// 757065
//
// Returns: 1
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
