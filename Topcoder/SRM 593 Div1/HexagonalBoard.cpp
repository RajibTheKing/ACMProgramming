#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;

int color[55][55];
vector<string> B;
int n, result;
int dx[] = {1 ,-1 ,0 ,-1 ,1 ,0};
int dy[] = {0 ,1 ,1 ,0 ,-1 ,-1};

class HexagonalBoard
{
public:
    bool isValid(int x,int y)
    {
        if(x>=0&&x<n&&y>=0&&y<n&&B[x][y]=='X') return true;
        return false;
    }
    void DFS_Bipertite(int x, int y, int c)
    {
        if(B[x][y]=='X'&&color[x][y]==-1)
        {
            color[x][y]=c;
            result = max(result, 1);
            //cout<<"Here Assign Color: "<<x<<", "<<y<<" = "<<c<<endl;
            for(int i=0;i<6;i++)
            {
                if(isValid(x+dx[i], y+dy[i]))
                {
                    //cout<<x<<", "<<y<<" => "<<x+dx[i]<<", "<<y+dy[i]<<endl;
                    DFS_Bipertite(x+dx[i], y+dy[i], !c);
                    result = max(result, 2);
                    if(color[x+dx[i]][y+dy[i]]==c)
                        result = max(result, 3);
                }
            }
        }
    }

	int minColors(vector <string> board)
	{
	    memset(color, -1, sizeof(color));

	    B = board;
	    result = 0;
	    n = board.size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                DFS_Bipertite(i, j, 0);
            }
        }


        return result;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	HexagonalBoard *obj;
	int answer;
	obj = new HexagonalBoard();
	clock_t startTime = clock();
	answer = obj->minColors(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"---","---","---"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"-X--","---X","----","-X--"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"XXXX","---X","---X","---X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"XX-XX--","-XX-XXX","X-XX--X","X--X-X-","XX-X-XX","-X-XX-X","-XX-XX-"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The pony Applejack has an N by N hexagonal board. The following picture shows the hexagonal board when N = 1, 2, 3, and 4.
//
//
//
//
//
// She wants to color some cells of the board. You are given a vector <string> board. If the j-th character of the i-th element of board is 'X', she wants to color the cell (i, j). If she colors two cells that share an edge, she must use different colors for those cells. Return the minimal number of colors she needs.
//
// DEFINITION
// Class:HexagonalBoard
// Method:minColors
// Parameters:vector <string>
// Returns:int
// Method signature:int minColors(vector <string> board)
//
//
// CONSTRAINTS
// -board will contain between 1 and 50 elements, inclusive.
// -Each element of board will contain exactly N characters, where N is the number of elements in board.
// -Each character in board will be either 'X' or '-'.
//
//
// EXAMPLES
//
// 0)
// {"---",
//  "---",
//  "---"}
//
//
// Returns: 0
//
// She won't color any cells, so she won't need any colors.
//
// 1)
// {"-X--",
//  "---X",
//  "----",
//  "-X--"}
//
// Returns: 1
//
// She can color all cells with the same color.
//
// 2)
// {"XXXX",
//  "---X",
//  "---X",
//  "---X"}
//
// Returns: 2
//
// For example, she can color cells in the following way:
//
// Color cells (0, 0), (0, 2), (1, 3), and (3, 3) red.
// Color cells (0, 1), (0, 3), and (2, 3) blue.
//
//
//
// 3)
// {"XX-XX--"
// ,"-XX-XXX"
// ,"X-XX--X"
// ,"X--X-X-"
// ,"XX-X-XX"
// ,"-X-XX-X"
// ,"-XX-XX-"}
//
// Returns: 3
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
