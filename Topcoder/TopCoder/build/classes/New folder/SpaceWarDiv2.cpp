#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SpaceWarDiv2 {
public:
	int minimalFatigue(vector <int> magicalGirlStrength, vector <int> enemyStrength, vector <int> enemyCount)
	{
	    return 1;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	SpaceWarDiv2 *obj;
	int answer;
	obj = new SpaceWarDiv2();
	clock_t startTime = clock();
	answer = obj->minimalFatigue(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;

	{
	// ----- test 0 -----
	int t0[] = {2,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,9,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 7;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {2,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,9,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {14,6,22};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {8,33};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {9,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {17,10,29,48,92,60,80,100,15,69,36,43,70,14,88,12,14,29,9,40};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {93,59,27,68,48,82,15,95,61,49,68,15,16,26,64,82,7,8,92,15};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {56,26,12,52,5,19,93,36,69,61,68,66,55,28,49,55,63,57,33,45};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 92;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Magical Girls are girls who have magical powers.
// They fight against evil to protect the Earth.
// Cosmic enemies have just attacked the Earth, and the Magical Girls are going to fight them.
//
// You are given a vector <int> magicalGirlStrength that describes the Magical Girls:
// for each i, magicalGirlStrength[i] is the strength of one of the girls.
// You are also given a vector <int> enemyStrength and a vector <int> enemyCount that describe their enemies:
// for each i, there are enemyCount[i] enemies that each have strength enemyStrength[i].
//
// Each Magical Girl will always fight one enemy at a time.
// A Magical Girl will defeat her enemy if her strength is greater than or equal to the strength of that enemy.
//
// At the beginning of the fight the fatigue of each Magical Girl is 0.
// Each time a Magical Girl defeats an enemy, her fatigue increases by 1.
//
// The Magical Girls want to defeat all the enemies.
// That is, each of the enemies must be defeated by one of the Magical Girls.
// Additionally, the Magical Girls want to minimize the maximum fatigue among them.
//
// If it is impossible to defeat all of the enemies, return -1.
// Otherwise, return the smallest F with the following property:
// the Magical Girls can defeat all enemies in such a way that at the end the fatigue of each girl is at most F.
//
// DEFINITION
// Class:SpaceWarDiv2
// Method:minimalFatigue
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int minimalFatigue(vector <int> magicalGirlStrength, vector <int> enemyStrength, vector <int> enemyCount)
//
//
// NOTES
// -The elements of enemyStrength are not necessarily pairwise distinct.
//
//
// CONSTRAINTS
// -magicalGirlStrength will contain between 1 and 50 elements, inclusive.
// -Each element of magicalGirlStrength will be between 1 and 100, inclusive.
// -enemyStrength and enemyCount will each contain between 1 and 50 elements, inclusive.
// -enemyStrength and enemyCount will contain the same number of elements.
// -Each element of enemyStrength will be between 1 and 100, inclusive.
// -Each element of enemyCount will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// {2, 3, 5}
// {1, 3, 4}
// {2, 9, 4}
//
// Returns: 7
//
// There are 3 Magical Girls, their strength are 2, 3, and 5.
// There are 3 kinds of enemies: 2 enemies with strength 1 each, 9 enemies with strength 3 each, and 4 enemies with strength 4 each.
// This is one of the ways how to minimize the maximal fatigue:
//
// Magical girl 0 defeats 2 enemies with strength 1.
// Magical girl 1 defeats 7 enemies with strength 3.
// Magical girl 2 defeats 2 enemies with strength 3 and 4 enemies with strength 4.
//
//
//
// 1)
// {2, 3, 5}
// {1, 1, 2}
// {2, 9, 4}
//
// Returns: 5
//
// Each of the Magical Girls can defeat any of the enemies. The optimal strategy is that each girl should defeat 5 of the enemies.
//
// 2)
// {14, 6, 22}
// {8, 33}
// {9, 1}
//
// Returns: -1
//
// None of the magical girls can beat the enemy with strength 33.
//
// 3)
// {17, 10, 29, 48, 92, 60, 80, 100, 15, 69, 36, 43, 70, 14, 88, 12, 14, 29, 9, 40}
// {93, 59, 27, 68, 48, 82, 15, 95, 61, 49, 68, 15, 16, 26, 64, 82, 7, 8, 92, 15}
// {56, 26, 12, 52, 5, 19, 93, 36, 69, 61, 68, 66, 55, 28, 49, 55, 63, 57, 33, 45}
//
// Returns: 92
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
