#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <math.h>
#include <iostream>
#include <string>

using namespace std;
#define rt "Invalid";

bool isLeapyear(int y)
{
    if(y%400==0) return true;
    else if(y%100==0) return false;
    else if(y%4==0) return true;
    else return false;
}
bool isDateValid(int y, int m, int d)
{
    if(m>12||m<1) return false;
    if(m==1||m==3||m==5||m==7||m==8||m==10||m==12)
    {
        if(d>31||d<1) return false;
    }
    else if(m==2)
    {
        if(isLeapyear(y))
        {
            if(d>29||d<1) return false;
        }
        else
        {
            if(d>28||d<1) return false;
        }
    }
    else if(m==4||m==6||m==9||m==11)
    {
        if(d>30||d<1) return false;
    }

    return true;

}
bool isRegionValid(string r, vector<string> rc)
{
    bool flag=false;
	    for(int i=0;i<rc.size();i++)
            if(r==rc[i])
                flag=true;
    return flag;
}
bool isCheckSumValid(string id, string c)
{
    int sum=0;
    int j=17;
    for(int i=0;i<id.size()-1;i++)
    {
        int t = id[i]-'0';
        t = (int) t*pow((double)2, (double)j);
        sum+=t;
        j--;
    }

    sum = 1-sum;
    int ans = sum % 11;

    ans+=11;
    ans%=11;
    int as = c[0]-'0';
    if(ans==10&&c[0]!='X')
        return false;
    else if(ans==10&&c[0]=='X')
        return true;
    else if(ans!=as)
        return false;
    else
        return true;

}
class IDNumberVerification
{
public:
	string verify(string id, vector <string> regionCodes)
	{
	    string r,b,s,c, yy,mm,dd;
	    r = id.substr(0,6);
	    b = id.substr(6,8);
	    s = id.substr(14,3);
	    c = id.substr(17,1);
	    yy = b.substr(0,4);
	    mm = b.substr(4,2);
	    dd = b.substr(6,2);

        if(!isRegionValid(r,regionCodes)) return rt;    //cout<<"region successful"<<endl;
        if(s=="000") return rt;                         //cout<<"seqenc successful"<<endl;
	    if(!isCheckSumValid(id,c)) return rt;           //cout<<"chksum successful"<<endl;


	    int y,m,d;
        stringstream ss;
        ss.clear();
        ss<<yy;
        ss>>y;
        ss.clear();
        ss<<mm;
        ss>>m;
        ss.clear();
        ss<<dd;
        ss>>d;
        if(y<1900||y>2011) return rt;
        if(!isDateValid(y,m,d)) return rt;             // cout<<"yymmdd successful"<<endl;


        ss.clear();
        int person;
        ss<<s;
        ss>>person;

        if(person%2==0)
            return "Female";
        else
            return "Male";

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	IDNumberVerification *obj;
	string answer;
	obj = new IDNumberVerification();
	clock_t startTime = clock();
	answer = obj->verify(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	vector <string> p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = "441323200312060636";
	string t1[] = {"441323"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Male";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "62012319240507058X";
	string t1[] = {"620123"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Female";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "321669197204300886";
	string t1[] = {"610111","659004"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "230231198306900162";
	string t1[] = {"230231"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "341400198407260005";
	string t1[] = {"341400"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "520381193206090891";
	string t1[] = {"532922","520381"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// This problem statement contains superscripts and/or subscripts. These may not display properly outside the applet.
//
// In People's Republic of China, every citizen has a unique ID string. The length of the ID is 18 characters. The first 17 characters (called the body code) are all digits, the last character (called the checksum code) can be either a digit or 'X'.
//
// The body code is then divided into three parts: from left to right, these are the region code, the birthday code, and the sequential code. They look as follows:
//
//
// The region code has 6 digits. Some 6-digit strings represent regions, other 6-digit strings are invalid. You are given the valid region codes as a vector <string> regionCodes.
// The birthday code has 8 digits. It gives the citizen's birthday in the form YYYYMMDD. That is, the first 4 digits is the year of birth, the next 2 is the month (01 to 12, with a leading zero if necessary), and the last 2 digits is the day. When verifying the birthday code, you should consider leap years (see the Notes). Additionally, a valid birthday code must represent a date between Jan 1, 1900 and Dec 31, 2011, inclusive.
// The sequential code has 3 digits. These 3 digits may be arbitrary, with one exception: the sequential code "000" is invalid. If the sequential code represents an odd number (e.g., "007"), the person is a male. Otherwise (e.g., "420") the person is a female.
//
//
// The last character of an ID string is the checksum code. This is derived from the first 17 digits. Let a1, a2, ..., a17 denote the body code from left to right. Consider the following modular equation: x + a1*217 + a2*216 + a3*215 + ... + a16*22 + a17*21 = 1 (mod 11). This equation always has exactly one solution x such that 0 <= x <= 10. If x=10, the checksum code is 'X'. Otherwise, the checksum code is the corresponding digit. (E.g., if x=5, the checksum code is '5'.)
//
// You are given a string id. If this is not a valid ID string, return "Invalid" (quotes for clarity). If id represents a valid ID string of a male citizen, return "Male". Finally, if id represents a valid ID string of a female citizen, return "Female".
//
// DEFINITION
// Class:IDNumberVerification
// Method:verify
// Parameters:string, vector <string>
// Returns:string
// Method signature:string verify(string id, vector <string> regionCodes)
//
//
// NOTES
// -A year is a leap year if and only if it satisfies one of the following two conditions: A: It is a multiple of 4, but not a multiple of 100. B: It is a multiple of 400. Therefore, 1904 and 2000 are leap years, while 1900 and 2011 are not.
//
//
// CONSTRAINTS
// -id will be 18 characters long.
// -First 17 characters of id will be between '0' and '9', inclusive.
// -Last character of id will be 'X' or between '0' and '9', inclusive.
// -regionCodes will contain between 1 and 50 elements, inclusive.
// -Each element of regionCodes will be 6 characters long.
// -Each element of regionCodes will consist of characters between '0' and '9', inclusive.
// -For each element of regionCodes, its first character will not be '0'.
// -Elements of regionCodes will be pairwise distinct.
//
//
// EXAMPLES
//
// 0)
// "441323200312060636"
// {"441323"}
//
// Returns: "Male"
//
// As you can see, region code, birthday code and sequential code are all valid. So we just need to check the equation of checksum code:
// 6 + 4*217 + 4*216 + 1*215 + 3*214 + 2*213 + 3*212 + 2*211 + 0*210 + 0*29 + 3*28 + 1*27 + 2*26 + 0*25 + 6*24 + 0*23 + 6*22 + 3*21 = 902276. It's easy to verify that 902276 mod 11 = 1. The sequential code ("063") is odd, thus this is a male.
//
// 1)
// "62012319240507058X"
// {"620123"}
//
// Returns: "Female"
//
//
//
// 2)
// "321669197204300886"
// {"610111","659004"}
//
// Returns: "Invalid"
//
// Region code '321669' is invalid.
//
// 3)
// "230231198306900162"
// {"230231"}
//
// Returns: "Invalid"
//
// Birthday code '19830690' is invalid.
//
// 4)
// "341400198407260005"
// {"341400"}
//
// Returns: "Invalid"
//
// Sequential code '000' is invalid.
//
// 5)
// "520381193206090891"
// {"532922","520381"}
//
// Returns: "Invalid"
//
// Checksum code is incorrect.
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
