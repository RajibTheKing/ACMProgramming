
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class TheNumberGameDiv2 
{
    int answer;
    int Reverse(int a)
    {
        System.out.println(a);
        String s = Integer.toString(a);
        String ss="";
        for(int i= s.length()-1;i>=0;i--)
            ss+=s.charAt(i);
        return Integer.parseInt(ss);
    }
    void rec(int a,int b, int kount)
    {
        if(a<=0) return;
        if(a>999999999) return;
        if(a==b) 
        {
            answer = Math.min(answer, kount);
            return;
        }
        
        int temp = Reverse(a);
        rec(temp, b, kount+1);
        temp = a/10;
        rec(temp, b, kount+1);
        return;
        
            
        
    }

    public int minimumMoves(int A, int B) 
    {
        answer=999999999+1;
        rec(A, B, 0);

        return answer;

    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
        System.out.println("]");
        TheNumberGameDiv2 obj;
        int answer;
        obj = new TheNumberGameDiv2();
        long startTime = System.currentTimeMillis();
        answer = obj.minimumMoves(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int p2;

        // ----- test 0 -----
        p0 = 25;
        p1 = 5;
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 5162;
        p1 = 16;
        p2 = 4;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 334;
        p1 = 12;
        p2 = -1;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 218181918;
        p1 = 9181;
        p2 = 6;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 9798147;
        p1 = 79817;
        p2 = -1;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Manao has recently invented a brand new single-player game called The Number Game.
    // 
    // The player starts with a number A. Also, another number B is chosen. Note that neither A nor B contain a zero digit in their base 10 representation.
    // 
    // The player's goal is to obtain B from A. In each move, the player can either reverse his current number, or he can divide it by 10 (using integer division).
    // For example, if the current number is 12849, the player can either reverse it to obtain 94821, or he can divide it by 10 to obtain 1284. (Note that we always round down when using integer division.)
    // 
    // You are given two ints A and B. If it is possible to obtain B from A, return the minimum number of moves necessary to reach this goal. Otherwise, return -1.
    // 
    // DEFINITION
    // Class:TheNumberGameDiv2
    // Method:minimumMoves
    // Parameters:int, int
    // Returns:int
    // Method signature:int minimumMoves(int A, int B)
    // 
    // 
    // CONSTRAINTS
    // -A will be between 1 and 999,999,999, inclusive.
    // -B will be between 1 and 999,999,999, inclusive.
    // -A and B will not contain a zero digit in base 10 representation.
    // -A and B will be distinct.
    // 
    // 
    // EXAMPLES
    // 
    // 0)
    // 25
    // 5
    // 
    // Returns: 2
    // 
    // Initially, the player has number 25 and needs to obtain 5. He can reverse the number and obtain 52, then divide it by 10 and obtain 5.
    // 
    // 1)
    // 5162
    // 16
    // 
    // Returns: 4
    // 
    // To obtain 16 from 5162 in four moves, the player can perform the following sequence of moves:
    // 
    // 
    // Reverse the number and obtain 2615.
    // Divide 2615 by 10 and obtain 261.
    // Reverse 261 and obtain 162.
    // Divide 162 by 10 and obtain 16.
    // 
    // Note that this is not the only possible sequence of four moves which leads to the goal.
    // 
    // 2)
    // 334
    // 12
    // 
    // Returns: -1
    // 
    // There is no way to obtain 12 from 334.
    // 
    // 3)
    // 218181918
    // 9181
    // 
    // Returns: 6
    // 
    // 
    // 
    // 4)
    // 9798147
    // 79817
    // 
    // Returns: -1
    // 
    // 
    // 
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
