package SRM575_Div2;


import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class TheNumberGameDivTwo {

    public String find(int n) 
    {
        boolean flag[] = new boolean[n+100];
        flag[1]=false;
        for(int i=2;i<=n;i++)
        {
            for(int j=2;j<i;j++)
            {
                if(i%j==0)
                {
                    if(flag[i-j]==false)
                        flag[i]=true;
                }
            }
        }
        if(flag[n]==true)
            return "John";
        else
            return "Brus";
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, String p1) {
        System.out.print("Test " + testNum + ": [" + p0);
        System.out.println("]");
        TheNumberGameDivTwo obj;
        String answer;
        obj = new TheNumberGameDivTwo();
        long startTime = System.currentTimeMillis();
        answer = obj.find(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p1 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p1);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        String p1;

        // ----- test 0 -----
        p0 = 6;
        p1 = "John";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 2;
        p1 = "Brus";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 747;
        p1 = "Brus";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 128;
        p1 = "Brus";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // John and Brus play a game with a number.
    // The game starts with a positive integer n.
    // The two players take alternating turns, John starts.
    // Each move looks as follows:
    // Let C be the current value of the integer.
    // The current player has to choose a positive divisor of the number C, other than 1 and C.
    // Once he chooses the divisor, he has to subtract it from C.
    // The result is the new number with which the other player now starts his move.
    // If a player cannot make a valid move, he loses the game.
    // 
    // 
    // For example, if they start with n=15, one possible gameplay can look as follows:
    // 
    // John takes the number 15, chooses its divisor 3, and decreases the number to 15-3 = 12.
    // Brus takes the number 12, chooses its divisor 4, and decreases the number to 12-4 = 8.
    // John takes the number 8, chooses its divisor 2, and decreases the number to 8-2 = 6.
    // Brus takes the number 6, chooses its divisor 3, and decreases the number to 6-3 = 3.
    // John takes the number 3, and as there are no divisors other than 1 and 3, he has no valid move and thus he loses the game.
    // 
    // 
    // 
    // You are given the int n.
    // Assume that both players use the optimal strategy while playing the game.
    // Return "John" (quotes for clarity) if John wins the game and "Brus" otherwise.
    // 
    // 
    // DEFINITION
    // Class:TheNumberGameDivTwo
    // Method:find
    // Parameters:int
    // Returns:String
    // Method signature:String find(int n)
    // 
    // 
    // CONSTRAINTS
    // -n will be between 1 and 1000, inclusive.
    // 
    // 
    // EXAMPLES
    // 
    // 0)
    // 6
    // 
    // Returns: "John"
    // 
    // John has two possible moves: either decrease 6 by 2 or decrease 6 by 3.
    // If he chooses the second option, Brus will have no possible moves, hence John will win the game.
    // 
    // 1)
    // 2
    // 
    // Returns: "Brus"
    // 
    // 
    // 
    // 2)
    // 747
    // 
    // Returns: "Brus"
    // 
    // 
    // 
    // 3)
    // 128
    // 
    // Returns: "Brus"
    // 
    // 
    // 
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
